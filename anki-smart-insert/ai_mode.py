"""Contans the code for AI mode.
This helps with Cards generated by AI, e. g.ChatGPT"""

import aqt
import anki
import re
from . import config

current_editor: aqt.editor.Editor = None
current_field: int = None


def on_editor_init(editor: aqt.editor.Editor):
    """Gets the current Editor instance

    Args:
        editor (aqt.editor.Editor): Reference to Editor window
    """
    global current_editor
    current_editor = editor


def on_field_change(note: anki.notes.Note, current_field_idx: int):
    """Gets the current field's index

    Args:
        note (anki.notes.Note): Not accessed
        current_field_idx (int): Current field index
    """
    global current_field
    current_field = current_field_idx


def process_ai_data(text: list[str]) -> str:
    """Invoked if text's first line matches AI-regex

    Args:
        text (list[str]): List of pasted lines

    Returns:
        str: Return "" to prevent insertion. Field content is edited manually
    """
    ai_question_pattern = config['ai']['front_regex']
    ai_question_groupref = config['ai']['front_mask']
    ai_answer_pattern = config['ai']['back_regex']
    ai_answer_groupref = config['ai']['back_mask']
    current_editor.note["Front"] = re.sub(ai_question_pattern, ai_question_groupref, text[0])
    answer = "".join(text[1:])
    current_editor.note["Back"] = re.sub(ai_answer_pattern, ai_answer_groupref, answer)
    # Add tag "ai-generated" if configured and not already present
    if config['ai']['tag_generated_cards'] and "ai-generated" not in current_editor.note.tags:
        current_editor.note.tags.append("ai-generated")
    # Reload note to make changes visible
    current_editor.loadNoteKeepingFocus()
    return ""
